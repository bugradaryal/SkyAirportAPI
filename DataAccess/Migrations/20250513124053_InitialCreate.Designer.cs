// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20250513124053_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Aircraft", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("Carry_Capacity")
                        .HasColumnType("DECIMAL(7,2)");

                    b.Property<decimal>("Current_Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(7,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Engine_Power")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fuel_Capacity")
                        .HasColumnType("DECIMAL(7,1)");

                    b.Property<DateTimeOffset?>("Last_Maintenance_Date")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE");

                    b.Property<decimal>("Max_Altitude")
                        .HasColumnType("DECIMAL(8,1)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<int>("aircraftStatus_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("aircraftStatus_id");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("Entities.AircraftStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("text")
                        .HasDefaultValue("NotOperational");

                    b.HasKey("id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("AircraftStatuses");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Status = "Available"
                        },
                        new
                        {
                            id = 2,
                            Status = "InMaintenance"
                        },
                        new
                        {
                            id = 3,
                            Status = "OutOfService"
                        },
                        new
                        {
                            id = 4,
                            Status = "NotOperational"
                        });
                });

            modelBuilder.Entity("Entities.Airline", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("text")
                        .HasDefaultValue("No Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("text");

                    b.Property<string>("WebAdress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<int>("airport_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("airport_id");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Entities.Airport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("text")
                        .HasDefaultValue("No Description");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("text");

                    b.Property<string>("MailAdress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(96)
                        .HasColumnType("text")
                        .HasDefaultValue("Undefined");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("MailAdress")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Entities.Crew", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<char>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValue('U');

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("Entities.Crew_Aircraft", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("aircraft_id")
                        .HasColumnType("integer");

                    b.Property<int>("crew_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.HasIndex("crew_id");

                    b.ToTable("Crew_Aircrafts");
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTimeOffset>("Arrival_Date")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE");

                    b.Property<DateTimeOffset>("Deperture_Date")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("text")
                        .HasDefaultValue("No Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("text");

                    b.Property<int>("airline_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("airline_id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Entities.Flight_Aircraft", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("aircraft_id")
                        .HasColumnType("integer");

                    b.Property<int>("flight_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.HasIndex("flight_id");

                    b.ToTable("Flight_Aircrafts");
                });

            modelBuilder.Entity("Entities.Moderation.LogEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Action_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5096)
                        .HasColumnType("text");

                    b.Property<string>("Target_table")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("loglevel_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("loglevel_id");

                    b.HasIndex("userId");

                    b.ToTable("LogEntrys");
                });

            modelBuilder.Entity("Entities.Moderation.LogLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("LogLevels");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Level = "Trace"
                        },
                        new
                        {
                            id = 2,
                            Level = "Debug"
                        },
                        new
                        {
                            id = 3,
                            Level = "Info"
                        },
                        new
                        {
                            id = 4,
                            Level = "Warn"
                        },
                        new
                        {
                            id = 5,
                            Level = "Error"
                        },
                        new
                        {
                            id = 6,
                            Level = "Fatal"
                        },
                        new
                        {
                            id = 7,
                            Level = "Alert"
                        },
                        new
                        {
                            id = 8,
                            Level = "Emergency"
                        });
                });

            modelBuilder.Entity("Entities.OperationalDelay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Delay_Duration")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("text");

                    b.Property<string>("Delay_Reason")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Delay_Time")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE");

                    b.Property<int>("flight_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("flight_id")
                        .IsUnique();

                    b.ToTable("OperationalDelays");
                });

            modelBuilder.Entity("Entities.OwnedTicket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("Baggage_weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(8,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("Puchase_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ticket_id")
                        .HasColumnType("integer");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ticket_id")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("OwnedTickets");
                });

            modelBuilder.Entity("Entities.Personal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<char>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValue('U');

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("text")
                        .HasDefaultValue("Undefined");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Start_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<int>("airport_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("airport_id");

                    b.ToTable("Personals");
                });

            modelBuilder.Entity("Entities.Seat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("Is_Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("text")
                        .HasDefaultValue("Undefined");

                    b.Property<string>("Seat_Class")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("text");

                    b.Property<int>("Seat_number")
                        .HasColumnType("integer");

                    b.Property<int>("flight_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("flight_id");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Entities.Ticket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<int>("seat_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("seat_id")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<char>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValue('U');

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Uptaded_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "88c09c19-1368-439a-a14e-9d8ef5d939d8",
                            Name = "Administrator",
                            NormalizedName = "ADMİNİSTRATOR"
                        },
                        new
                        {
                            Id = "bb51480d-ee83-40fc-860d-224d8c1171a0",
                            Name = "Support",
                            NormalizedName = "SUPPORT"
                        },
                        new
                        {
                            Id = "b0043bfb-988e-4494-9e9f-7bcc7a4e04ca",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Aircraft", b =>
                {
                    b.HasOne("Entities.AircraftStatus", "aircraftStatus")
                        .WithMany("aircraft")
                        .HasForeignKey("aircraftStatus_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("aircraftStatus");
                });

            modelBuilder.Entity("Entities.Airline", b =>
                {
                    b.HasOne("Entities.Airport", "airport")
                        .WithMany("airline")
                        .HasForeignKey("airport_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airport");
                });

            modelBuilder.Entity("Entities.Crew_Aircraft", b =>
                {
                    b.HasOne("Entities.Aircraft", "aircraft")
                        .WithMany("crew_Aircraft")
                        .HasForeignKey("aircraft_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Crew", "crew")
                        .WithMany("crew_Aircraft")
                        .HasForeignKey("crew_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("aircraft");

                    b.Navigation("crew");
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.HasOne("Entities.Airline", "airline")
                        .WithMany("flight")
                        .HasForeignKey("airline_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("airline");
                });

            modelBuilder.Entity("Entities.Flight_Aircraft", b =>
                {
                    b.HasOne("Entities.Aircraft", "aircraft")
                        .WithMany("flight_Aircraft")
                        .HasForeignKey("aircraft_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Flight", "flight")
                        .WithMany("flight_Aircraft")
                        .HasForeignKey("flight_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("aircraft");

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Entities.Moderation.LogEntry", b =>
                {
                    b.HasOne("Entities.Moderation.LogLevel", "logLevel")
                        .WithMany("logEntry")
                        .HasForeignKey("loglevel_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "user")
                        .WithMany("logEntry")
                        .HasForeignKey("userId");

                    b.Navigation("logLevel");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.OperationalDelay", b =>
                {
                    b.HasOne("Entities.Flight", "flight")
                        .WithOne("operationalDelay")
                        .HasForeignKey("Entities.OperationalDelay", "flight_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Entities.OwnedTicket", b =>
                {
                    b.HasOne("Entities.Ticket", "ticket")
                        .WithOne("ownedTicket")
                        .HasForeignKey("Entities.OwnedTicket", "ticket_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "user")
                        .WithMany("ownedTickets")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Personal", b =>
                {
                    b.HasOne("Entities.Airport", "airport")
                        .WithMany("personal")
                        .HasForeignKey("airport_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airport");
                });

            modelBuilder.Entity("Entities.Seat", b =>
                {
                    b.HasOne("Entities.Flight", "flight")
                        .WithMany("seat")
                        .HasForeignKey("flight_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Entities.Ticket", b =>
                {
                    b.HasOne("Entities.Seat", "seat")
                        .WithOne("ticket")
                        .HasForeignKey("Entities.Ticket", "seat_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("seat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Aircraft", b =>
                {
                    b.Navigation("crew_Aircraft");

                    b.Navigation("flight_Aircraft");
                });

            modelBuilder.Entity("Entities.AircraftStatus", b =>
                {
                    b.Navigation("aircraft");
                });

            modelBuilder.Entity("Entities.Airline", b =>
                {
                    b.Navigation("flight");
                });

            modelBuilder.Entity("Entities.Airport", b =>
                {
                    b.Navigation("airline");

                    b.Navigation("personal");
                });

            modelBuilder.Entity("Entities.Crew", b =>
                {
                    b.Navigation("crew_Aircraft");
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.Navigation("flight_Aircraft");

                    b.Navigation("operationalDelay")
                        .IsRequired();

                    b.Navigation("seat");
                });

            modelBuilder.Entity("Entities.Moderation.LogLevel", b =>
                {
                    b.Navigation("logEntry");
                });

            modelBuilder.Entity("Entities.Seat", b =>
                {
                    b.Navigation("ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Ticket", b =>
                {
                    b.Navigation("ownedTicket")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("logEntry");

                    b.Navigation("ownedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
